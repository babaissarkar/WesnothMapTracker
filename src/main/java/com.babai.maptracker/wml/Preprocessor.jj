options
{
	LOOKAHEAD=3;
	STATIC=false;
}

PARSER_BEGIN(Preprocessor)
package wml;

import java.util.*;
import java.util.logging.*;
import java.io.*;

public class Preprocessor {
	private HashMap<String, Definition> defines = new HashMap<>();
	private final Logger pL = Logger.getLogger("preprocessor.parse");
	private boolean showParseLogs = false;
	
	public static void main(String[] args) {
		ArgParser argParse = new ArgParser();
		argParse.parseArgs(args);
		InputStream in = argParse.in;
		
		if (in == null) return;
		try {
			Preprocessor p = new Preprocessor(in);
			p.showParseLogs = argParse.showParseLogs;
			p.token_source.setLogs(argParse.showLogs);
			while (true) { 
				p.getParsed();
			}
		} catch(Exception e) {
			// nothing
		}
	}
	
	public void debugPrint(String s) {
		if (showParseLogs) {
			pL.info(s);
		}
	}
	
	public void warningPrint(String s) {
		if (showParseLogs) {
			pL.warning(s);
		}
	}
}

PARSER_END(Preprocessor)

TOKEN_MGR_DECLS : {
	private boolean showLogs = false;
	private final Logger tL = Logger.getLogger("preprocessor.token");
	
	public void setLogs(boolean showLogs) {
		this.showLogs = showLogs;
	}
	public void debugPrint(String s) {
		if (showLogs) {
			tL.info(s);
		}
	}
}

SKIP : { < ("# "|"##"|"###") (~["\n","\r"])* ("\n"|"\r"|"\r\n") > }

TOKEN : {
	< DEFINE : "#define" >	{ debugPrint("DEFINE"); }
|	< ENDDEF : "#enddef" >	{ debugPrint("ENDDEF"); }
|	< IFDEF  : "#ifdef" >	{ debugPrint("IFDEF"); }
|	< ENDIF  : "#endif" >	{ debugPrint("ENDIF"); }
|	< UNDEF  : "#undef" >	{ debugPrint("UNDEF"); }
|	< TEXTDOMAIN : "#textdomain" > { debugPrint("TEXTDOMAIN"); }
|	< LBR    : "{" >		{ debugPrint("Left Brace"); }
|	< RBR    : "}" >		{ debugPrint("Right Brace"); }
|	< EQL    : "=" >		{ debugPrint("Equals"); }
|	< SLASH  : "/" >		{ debugPrint("Slash"); }
|	< SPACE  : " "|"\t" >	{ debugPrint("Space"); }
|	< STRING : (<LETTER>|<DIGIT>)+ >			{ debugPrint("STRING"); }
|	< NUMBER : (<DIGIT>)+ ("." (<DIGIT>)+)? >	{ debugPrint("NUMBER"); }
|	< LETTER :
		["A"-"Z"]|["a"-"z"]|<EQL>|"?"|"!"|":"|";"|"."|","
		|"["|"]"|"_"|"-"|"\""|"'"|<SLASH>
	>
	{ debugPrint("LETTER"); }
|	< DIGIT  : ["0"-"9"] >						{ debugPrint("DIGIT"); }
|	< EOL    : "\n"|"\r"|"\r\n" >				{ debugPrint("EOL"); }
}

void getParsed() :
{
	Token tok; String exp;
}
{
	(
		  define() 
		| exp=expand() { System.out.println(exp); }
		| ifdef()
		| undef()
		| <TEXTDOMAIN> <SPACE> (tok=<STRING>) { debugPrint("Textdomain " + tok.image); }
		| (<SPACE>)
		| (<EOL>)
		| (<EOF>) { System.exit(0); }
	)+
}

void define() :
{
	Token name, body, arg;
	StringBuilder sb = new StringBuilder();
	Definition def;
	String macro;
	Vector<String> args = new Vector<>();
}
{
	(
		<DEFINE> <SPACE>
		(name=<STRING>)
		(
			<SPACE> (arg=<STRING>) { args.add(arg.toString()); }
		)*
		(<EOL>)?
		(
			(
				macro=expand()
			) { sb.append(macro); }
			|
			(
				  body=<STRING>
				| body=<LBR>
				| body=<RBR>
				| body=<SPACE>
				| body=<EOL>
			) { sb.append(body.toString()); }
		)+
		<ENDDEF>
	) {
		def = new Definition(name.toString(), sb.toString(), args);
		debugPrint("defining macro " + name.toString());
		defines.put(name.toString(), def);
	}
}

String expand() :
{
	Token name, arg;
	Vector<String> args = new Vector<>();
	StringBuilder sb = new StringBuilder();
}
{
	(
		(<LBR>) (name=<STRING>) { sb.append("{" + name.image); }
		(
			<SPACE> (arg=<STRING>) { sb.append(" " + arg.image); args.add(arg.toString()); }
		)*
		(<RBR>) { sb.append("}"); }
	) {
		Definition def = defines.get(name.image);
		if (def != null) {
			debugPrint("expanding macro " + name.image);
			try {
				return def.expand(args);
			} catch(IllegalArgumentException e) {
				e.printStackTrace();
				return sb.toString();
			}
		} else {
			warningPrint("undefined macro " + name.image);
			return sb.toString();
		}
	}
}

void ifdef() :
{
	Token name;
}
{
	(<IFDEF> <SPACE> (name=<STRING>) <EOL>) {
		if (defines.get(name.image) == null) {
			debugPrint("ifdef: define " + name.image + " not found, skipping block");
			while(token.kind != ENDIF) {
				token = getNextToken();
			}
		} else {
			debugPrint("ifdef: define " + name.image + " found, parsing block");
		}
	}
}

void undef() :
{
	Token name;
}
{
	<UNDEF> <SPACE> (name=<STRING>) {
		debugPrint("removing macro " + name.toString());
		defines.remove(name.image);
	}

}


